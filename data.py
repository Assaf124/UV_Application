import app_config
import urllib3
import json
import time
import datetime
import logging
import logger
import math
import json_parser
from Sun import Sun


# logger.init_logger()
LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)


def load_locations(latitude, *args):


    pass


def get_location(latitude, *args):
    """
    This function returns a location name (usually a city) based on given latitude.

    Args:
        latitude:   Integer. the latitude of the given location

    Returns:
        key:    A name of a location (City) taken from locations.json
    """

    location_dict = json_parser.load_locations()

    for key, value in location_dict.items():
        if value == latitude:
            LOGGER.info(f'Found location for a given latitude: {key}')
            return key

    LOGGER.warning('Did not find location for given latitude')
    return None


def get_uv_risk(latitude, longitude, *args):
    """
    This function returns the uv risk which correspond to skin type 1 to 6
    (returned as a list) and the Ozone value which returned as an integer

    Args:
        latitude:       Integer. the latitude of the given location
        longitude:      Integer. the longitude of the given location

    Returns:
        uv_list:        List of integers. Each Integer is a UV exposure time in accordance with skin type
        ozone_value:    Integer. describes the Ozone in Dobson units

    Raises:
        Exception:     Raises an exception.
    """

    method = 'GET'
    header_name = app_config.OPENUV_HEADER
    token_value = app_config.OPENUV_TOKEN
    url = 'http://api.openuv.io/api/v1/uv?lat={}&lng={}'.format(latitude, longitude)
    dict_headers = {header_name: token_value}

    try:
        http = urllib3.PoolManager()

        http_request = http.request(method, url, headers=dict_headers)
        LOGGER.info(f'Sent http request: {method}  {url}, {dict_headers}')

        reply = json.loads(http_request.data.decode('utf-8'))
        LOGGER.info(f'Got reply: {reply}')

        uv_dict = reply['result']['safe_exposure_time']
        uv_list = list(uv_dict.values())
        LOGGER.info(f'Returning U.V values: {uv_list}')

        ozone_value = reply['result']['ozone']
        LOGGER.info(f'Returning Ozone value: {ozone_value}')

        return uv_list, ozone_value

    except Exception as arg:
        LOGGER.error(f'An error was fetched:\n{arg}')
        raise arg


def get_token_for_clouds_coverage(*args):
    """
    The api.awhere.com site required a token. This function gets the token which would
    be used later on in the get_cloud_coverage function which required the token

    Args:
        None

    Returns:
        access_token:   token for api.awhere.com which used to get cloud coverage

    Raises:
        Exception:     Raises an exception.
    """

    method = 'POST'
    url = 'https://api.awhere.com/oauth/token'
    dict_headers = {'Content-Type': 'application/x-www-form-urlencoded',
                    'Authorization': 'Basic QWowMnFJZTFVSWdxbWJ4Y2NzY1QyeGFTZU9Xa3QybHI6bWt5RG42dnIxRHhZR0RtNQ=='}
    encoded_body = 'grant_type=client_credentials'

    try:
        http = urllib3.PoolManager()

        http_request = http.request(method, url, headers=dict_headers, body=encoded_body)
        LOGGER.info('Sent http request for token: {}  {}, {} {}'.format(method, url, dict_headers, encoded_body))

        reply = json.loads(http_request.data.decode('utf-8'))
        LOGGER.info('Received access token: {}'.format(reply['access_token']))

        return reply['access_token']

    except (Exception) as arg:
        LOGGER.error(f'An error was fetched:\n{arg}')
        raise arg


def get_cloud_coverage(latitude, longitude, token, *args):
    """
    This function returns both the cloud coverage (based on  latitude and longitude)
    and the Solar amount

    Args:
        latitude:   Integer. the latitude of the given location
        longitude:  Integer. the longitude of the given location
        token:      the access_token which is generated by the get_token_for_clouds_coverage function

    Returns:
        cloudCover: Integer. cloud coverage value in % units
        solar:      Integer. Sun solar flux value

    Raises:
        Exception:     Raises an exception.
    """

    return 54.3, 732    #   remove this
    today = time.strftime("%Y-%m-%d", time.gmtime())
    method = 'GET'
    url = 'https://api.awhere.com/v2/weather/locations/{},{}/forecasts/{}'.format(latitude, longitude, today)
    dict_headers = {'Authorization': 'Bearer {}'.format(token)}

    try:
        http = urllib3.PoolManager()

        http_request = http.request(method, url, headers=dict_headers)
        LOGGER.info('Sent http request: {}  {}, {}'.format(method, url, dict_headers))

        reply = json.loads(http_request.data.decode('utf-8'))
        LOGGER.info(f'Received forecast reply: {reply}')

        forecast_list = reply['forecast']
        index = parse_list(forecast_list)

        LOGGER.info('Returning cloud coverage value {}'.format(forecast_list[index]['sky']['cloudCover']))
        # print(f"{forecast_list[index]['solar']['amount']}")
        return forecast_list[index]['sky']['cloudCover'], forecast_list[index]['solar']['amount']

    except (Exception) as arg:
        LOGGER.error(f'An error was fetched:\n{arg}')
        raise arg


def parse_list(forecast_list, *args):
    """
    This function returns the ...

    Args:
        forecast_list:  TDB...

    Returns:
        index-1:    TBD...

    """
    for index, item in enumerate(forecast_list):
        start_datetime_string = item.get('startTime')
        start_time_value = start_datetime_string.split('T')
        hour_value = start_time_value[1].split(':')

        if int(hour_value[0]) == int(datetime.datetime.now().hour):
            return index-1


def get_local_time(latitude, longitude, *args):
    """
    This function returns the local time based on latitude and longitude values.
    First we get the Unix UTC time. Then we get from google the offset time for a given
    location based on its latitude and longitude values. Finally we calculate the local time
    based on UTC + offset value.

    Args:
        latitude:   Integer. the latitude of the given location
        longitude:  Integer. the longitude of the given location

    Returns:
        local_time_human_format:    String. for example: 2018-05-23 15:10:08
        actual_local_time:          Integer. Unix/Epoch format, for example: 1527088208.0323346
        total_time_offset:          Integer. Total local time offset (in seconds) from UTC time.

    Raises:
        Exception:     Raises an exception.
    """

    unix_time = time.time()
    LOGGER.info(f'Fetched Unix (Epoch) Time UTC: {unix_time}')

    api_key = app_config.GOOGLE_API_KEY
    method = 'GET'
    url = f'https://maps.googleapis.com/maps/api/timezone/json?location={latitude},{longitude}&timestamp={unix_time}&' \
          f'key={api_key}'

    try:
        http = urllib3.PoolManager()

        http_request = http.request(method, url)
        LOGGER.info(f'Sent http request: {method} , {url}')

        local_time = json.loads(http_request.data.decode('utf-8'))
        LOGGER.info(f'Received google time reply: {local_time}')

        total_time_offset = local_time['dstOffset'] + local_time['rawOffset']
        actual_local_time = unix_time + total_time_offset
        LOGGER.info(f'Got local time Unix format: {actual_local_time}')

        local_time_human_format = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(actual_local_time))
        LOGGER.info(f'Got local time human format: {local_time_human_format}')

        return local_time_human_format, actual_local_time, total_time_offset

    except (Exception) as arg:
        LOGGER.error(f'An error was fetched:\n{arg}')
        raise arg


def calculate_sun_max_angle(latitude):
    """
    This function calculates the Sun maximum angle in the sky based on
    given latitude and the day of the year

    Args:
        latitude:   Integer. the latitude of the given location

    Returns:
        sun_max_angle:  Integer. The sun maximum angle in the sky for a
                        given day in accordance with the given latitude

    Raises:
        Exception:     Raises an exception.
    """

    RAD = math.pi/180
    EARTH_TILT = 23.43691

    day_of_year = time.localtime().tm_yday

    DELTA = EARTH_TILT * RAD * math.sin(RAD * (360 / 365.2425) * (284 + day_of_year))
    sun_max_angle = 90 - latitude + math.degrees(DELTA)

    LOGGER.info(f'Calculated sun max angle: {sun_max_angle}')

    return sun_max_angle


def calculate_sun_angle(latitude, longitude, local_time_unix_format, time_offset, *args):
    """
    This function calculates the Sun actual angle in the sky based on latitude, longitude
    and local time

    Args:
        latitude:               Integer. the latitude of the given location
        longitude:              Integer. the longitude of the given location
        local_time_unix_format: Integer.
        time_offset:            Integer.

    Returns:
        sun_angle:  Integer. The sun actual angle in the sky.

    Raises:
        Exception:     Raises an exception.
    """

    sun_max_angle = calculate_sun_max_angle(latitude)

    time_offset_hours = time_offset/3600
    sun = Sun()

    sunrise_hour = math.floor(sun.get_sunrise_time(latitude, longitude)['decimal'] + time_offset_hours)
    sunrise_minutes = 60*(sun.get_sunrise_time(latitude, longitude)['decimal'] + time_offset_hours - sunrise_hour)
    LOGGER.info(f'Sunrise value: {sunrise_hour}:{sunrise_minutes}')

    sunset_hour = math.floor(sun.get_sunset_time(latitude, longitude)['decimal'] + time_offset_hours)
    sunset_minutes = 60*(sun.get_sunset_time(latitude, longitude)['decimal'] + time_offset_hours - sunset_hour)
    LOGGER.info(f'Sunset value: {sunset_hour}:{sunset_minutes}')

    daylength = sun.get_sunset_time(latitude, longitude)['decimal'] - sun.get_sunrise_time(latitude, longitude)['decimal']
    daylength_in_minutes = daylength * 60
    LOGGER.info(f'Calculated day length: {daylength} hours')

    local_time_in_minutes = extract_minutes_from_timestamp(get_local_time(latitude, longitude)[0], True)
    LOGGER.info(f'Calculated local_time_in_minutes: {local_time_in_minutes}')

    sunrise_in_minutes = sunrise_hour*60 + sunrise_minutes
    LOGGER.info(f'Calculated sunrise_in_minutes: {sunrise_in_minutes}')

    sunset_in_minutes = sunset_hour*60 + sunset_minutes
    LOGGER.info(f'Calculated sunrise_in_minutes: {sunset_in_minutes}')

    if local_time_in_minutes < sunrise_in_minutes:
        sun_angle = 0
        LOGGER.info(f'local_time_in_minutes < sunrise_in_minutes. It is night')

    elif local_time_in_minutes > sunset_in_minutes:
        sun_angle = 0
        LOGGER.info(f'local_time_in_minutes > sunset_in_minutes. It is night')

    else:
        m = (local_time_in_minutes - sunrise_in_minutes) / (daylength_in_minutes / 2)
        if m <= 1:
            sun_angle = sun_max_angle * m

        else:
            n = (local_time_in_minutes - sunrise_in_minutes) - (daylength_in_minutes / 2)
            a = (daylength_in_minutes / 2) - n
            b = a / (daylength_in_minutes / 2)
            sun_angle = sun_max_angle * b

    LOGGER.info(f'Calculated sun angle is: {sun_angle}')
    return sun_angle


def extract_minutes_from_timestamp(timestamp, flag):
    LOGGER.info(f'extract_minutes_from_timestamp function was called with parameters: {timestamp} , {flag}')
    try:
        if flag:
            time_list = timestamp.split()
            hours_and_minutes = time_list[1].split(':')
            total_in_minutes = int(hours_and_minutes[0])*60 + int(hours_and_minutes[1])

            LOGGER.info(f'Calculated total time in minutes: {total_in_minutes}')

            return total_in_minutes

    except:
        return None


def get_sun_altitude():



    pass


if __name__ == '__main__':

    # Herzeliya
    LAT = 32.15922
    LNG = 34.80715

    # New York
    LAT = 40.7128
    LNG = -74.0061

    # Singapore
    LAT = 1.3521
    LNG = 103.8198

    # Sydney
    LAT = -33.8688
    LNG = 151.2093

    # Lisbon
    LAT = 38.7223
    LNG = -9.1993

    # Beijing
    LAT = 39.9042
    LNG = 116.4074